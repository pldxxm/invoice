name: Deploy to AWS ubuntu EC2 instance

on:
  push:
    branches:
      - main
  # allow manual deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: aws-ec2
    # changed the ssl certificate and key
    env: # ← Declare env variables here
      REMOTE_HOST: ${{ secrets.PUBLIC_IP }}
      REMOTE_USER: ubuntu
      # EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      AUTH_SECRET: ${{ secrets.SESSION_SECRET}}
      TOKEN: ${{ secrets.TOKEN }}
      PORT: 3000
      NODE_ENV: production
      tag: v1.2
      SSL_CERTIFICATE: ${{ secrets.SSL_CERTIFICATE }}
      SSL_KEY: ${{ secrets.SSL_KEY }}

    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v4

      # - name: Setup Node.js
      #   uses: actions/setup-node@v4.4.0
      #   with:
      #     node-version: 20.11.1

      # - name: Install CSS build dependencies
      #   run: npm install postcss postcss-cli tailwindcss autoprefixer

      # - name: Build Css
      #   run: npm run buildcss

      - name: test env
        run: |
          echo "REMOTE_HOST: ${{ env.REMOTE_HOST }}"
          echo "REMOTE_USER: ${{ env.REMOTE_USER }}"
          echo "MONGODB_URI: ${{ env.MONGODB_URI }}"
          echo "AUTH_SECRET: ${{ env.AUTH_SECRET }}"
          echo "PORT: ${{ env.PORT }}"
          echo "NODE_ENV: ${{ env.NODE_ENV }}"
          echo "EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}"
          echo "SSL_CERTIFICATE: ${{ env.SSL_CERTIFICATE }}"
          echo "SSL_KEY: ${{ env.SSL_KEY }}"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0 # ← Different action
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu

            # Set git user name and email
            git config --global  user.name "pldxxm"
            git config --global  user.email "pldxxm@example.com"

            #Clone or update repository (using token authentication)
            if [ ! -d "invoice" ]; then
              echo "Repository not found, cloning..."
              sudo git clone https://${{ env.TOKEN }}@github.com/pldxxm/invoice.git
            else
              echo "Repository exists, pulling latest changes..."
              cd invoice
              # Update remote URL to use token
              sudo git remote set-url origin https://${{ env.TOKEN }}@github.com/pldxxm/invoice.git
              sudo git pull origin main
              cd ..
            fi

            # Check and install Node.js 20.11.1 (only if not present or wrong version)
            if ! command -v node &> /dev/null || [[ "$(node --version)" != "v20.11.1" ]]; then
              echo "Installing Node.js 20.11.1..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi

            # Check and install Nginx (only if not present)
            if ! command -v nginx &> /dev/null; then
              echo "Installing Nginx..."
              sudo apt-get install -y nginx
            fi

            # Create SSL directory and handle certificates (only if not exists or needs update)
            if [ ! -d "/etc/nginx/ssl" ] || [ ! -f "/etc/nginx/ssl/fullchain.pem" ] || [ ! -f "/etc/nginx/ssl/privkey.pem" ]; then
              echo "Setting up SSL certificates..."
              sudo mkdir -p /etc/nginx/ssl

              # Option 1: If you have fullchain.pem and privkey.pem files
              if [ -f "fullchain.pem" ] && [ -f "privkey.pem" ]; then
                echo "Using local fullchain.pem and privkey.pem files..."
                sudo cp fullchain.pem /etc/nginx/ssl/
                sudo cp privkey.pem /etc/nginx/ssl/
              # Option 2: If you have certificates as GitHub secrets
              elif [ -n "${{ env.SSL_CERTIFICATE }}" ] && [ -n "${{ env.SSL_KEY }}" ]; then
                echo "Using SSL certificates from GitHub secrets..."
                echo "${{ env.SSL_CERTIFICATE }}" | sudo tee /etc/nginx/ssl/fullchain.pem > /dev/null
                echo "${{ env.SSL_KEY }}" | sudo tee /etc/nginx/ssl/privkey.pem > /dev/null
              else
                echo "No SSL certificates found. Creating self-signed certificate for testing..."
                sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                  -keyout /etc/nginx/ssl/privkey.pem \
                  -out /etc/nginx/ssl/fullchain.pem \
                  -subj "/C=US/ST=State/L=City/O=Organization/CN=${{ env.REMOTE_HOST }}"
              fi

              # Set proper permissions for SSL files
              sudo chown root:root /etc/nginx/ssl/fullchain.pem /etc/nginx/ssl/privkey.pem
              sudo chmod 644 /etc/nginx/ssl/fullchain.pem
              sudo chmod 600 /etc/nginx/ssl/privkey.pem
            else
              echo "SSL certificates already exist, checking for updates..."
              
              # Check if we have new certificates to update with
              if [ -f "fullchain.pem" ] && [ -f "privkey.pem" ]; then
                echo "Updating with new local fullchain.pem and privkey.pem files..."
                sudo cp fullchain.pem /etc/nginx/ssl/
                sudo cp privkey.pem /etc/nginx/ssl/
                CERT_UPDATED=true
              elif [ -n "${{ env.SSL_CERTIFICATE }}" ] && [ -n "${{ env.SSL_KEY }}" ]; then
                echo "Updating with new SSL certificates from GitHub secrets..."
                echo "${{ env.SSL_CERTIFICATE }}" | sudo tee /etc/nginx/ssl/fullchain.pem > /dev/null
                echo "${{ env.SSL_KEY }}" | sudo tee /etc/nginx/ssl/privkey.pem > /dev/null
                CERT_UPDATED=true
              else
                echo "No new certificates provided, keeping existing ones..."
                CERT_UPDATED=false
              fi
              
              # If certificates were updated, set proper permissions
              if [ "$CERT_UPDATED" = true ]; then
                echo "Setting permissions for updated certificates..."
                sudo chown root:root /etc/nginx/ssl/fullchain.pem /etc/nginx/ssl/privkey.pem
                sudo chmod 644 /etc/nginx/ssl/fullchain.pem
                sudo chmod 600 /etc/nginx/ssl/privkey.pem
              fi
            fi

            # Configure Nginx with HTTPS and reverse proxy (always update config)
            echo "Updating Nginx configuration..."
            sudo tee /etc/nginx/sites-available/invoice > /dev/null << 'EOF'
            server {
              listen 80;
              server_name ${{ env.REMOTE_HOST }};
              return 301 https://$host$request_uri;
            }

            server {
              listen 443 ssl http2;
              server_name ${{ env.REMOTE_HOST }};
              
              # SSL Configuration
              ssl_certificate /etc/nginx/ssl/fullchain.pem;
              ssl_certificate_key /etc/nginx/ssl/privkey.pem;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
              ssl_prefer_server_ciphers off;
              ssl_session_cache shared:SSL:10m;
              ssl_session_timeout 10m;
              
              # Security headers
              add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
              add_header X-Frame-Options DENY always;
              add_header X-Content-Type-Options nosniff always;
              add_header X-XSS-Protection "1; mode=block" always;
              
              location / {
                proxy_pass http://localhost:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header X-Forwarded-For $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-Host $server_name;
                
                # Proxy timeouts
                proxy_connect_timeout 60s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
              }
            }
            EOF

            # Enable the site and test configuration (only if not already enabled)
            if [ ! -L "/etc/nginx/sites-enabled/invoice" ]; then
              echo "Enabling Nginx site..."
              sudo ln -sf /etc/nginx/sites-available/invoice /etc/nginx/sites-enabled/invoice
            fi

            # Test and reload Nginx configuration
            echo "Testing Nginx configuration..."
            sudo nginx -t
            if [ $? -eq 0 ]; then
              echo "Nginx config test passed, reloading..."
              sudo systemctl reload nginx
              
              # If certificates were updated, perform additional validation
              if [ "$CERT_UPDATED" = true ]; then
                echo "Validating updated SSL certificates..."
                
                # Check certificate expiration
                CERT_EXPIRY=$(sudo openssl x509 -in /etc/nginx/ssl/fullchain.pem -noout -enddate | cut -d= -f2)
                echo "Certificate expires on: $CERT_EXPIRY"
                
                # Check if certificate is valid
                if sudo openssl x509 -in /etc/nginx/ssl/fullchain.pem -noout -checkend 0; then
                  echo "✅ SSL certificate is valid and not expired"
                else
                  echo "⚠️  SSL certificate has expired or is invalid"
                fi
                
                # Test HTTPS connection locally
                echo "Testing HTTPS connection..."
                if curl -k -s -o /dev/null -w "%{http_code}" https://localhost/ | grep -q "200\|301\|302"; then
                  echo "✅ HTTPS connection test successful"
                else
                  echo "⚠️  HTTPS connection test failed, restarting Nginx..."
                  sudo systemctl restart nginx
                fi
              fi
            else
              echo "Nginx config test failed, restarting..."
              sudo systemctl restart nginx
            fi

            # Check and install PM2 (only if not present)
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              sudo npm install -g pm2
            fi

            # Update environment variables
            MONGODB_URI="${{ env.MONGODB_URI }}"
            SESSION_SECRET="${{ env.SESSION_SECRET }}"
            AUTH_SECRET="${{ env.AUTH_SECRET }}"
            PORT="${{ env.PORT }}"
            NODE_ENV="${{ env.NODE_ENV }}"

            # Create/update .env file
            echo "Updating environment configuration..."
            sudo tee .env > /dev/null << EOF
              NODE_ENV=$NODE_ENV
              MONGODB_URI=$MONGODB_URI
              SESSION_SECRET=$SESSION_SECRET
              AUTH_SECRET=$AUTH_SECRET
              PORT=$PORT
            EOF

            # Navigate to app directory and update dependencies
            cd invoice
            echo "Installing/updating Node.js dependencies..."
            sudo npm install --production 

            # Restart or start the application
            echo "Restarting application..."
            pm2 restart index.js || pm2 start index.js

            # Wait for application to start and perform health check
            echo "Waiting for application to start..."
            sleep 10

            # Health check
            echo "Performing health check..."
            if curl -s -f http://localhost:3000/ > /dev/null; then
              echo "✅ Application health check passed"
            else
              echo "⚠️  Application health check failed, checking logs..."
              pm2 logs index.js --lines 20
              echo "Attempting to restart application..."
              pm2 restart index.js
              sleep 5
            fi

            # Final Nginx restart to ensure everything is working
            echo "Final Nginx restart..."
            sudo systemctl restart nginx

            # Final verification
            echo "Final deployment verification..."
            if curl -s -f http://localhost:3000/ > /dev/null && sudo systemctl is-active --quiet nginx; then
              echo "🎉 Deployment completed successfully!"
              echo "Application is running on localhost:3000"
              echo "Nginx is running and serving HTTPS"
            else
              echo "❌ Deployment verification failed"
              echo "Please check logs and troubleshoot manually"
              exit 1
            fi
